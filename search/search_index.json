{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CADUS incinerator Furnace for the incineration of medical waste. Project scope This project contains the firmware & schematic for the control module of the CADUS incinerator. Hardware The control module is based on this ESP32 board: DEBO JT ESP32 NodeMCU similar to DOIT ESP32 DEVKIT V1 . KiCad project covering the schematic of the motherboard carrying the ESP32 is included in the pcb folder. Build Prerequisites Install PlatformIO IDE or PlatformIO Core (CLI) PlatformIO will take care of the Arduino framework and third-party libraries. Build PlatformIO IDE: Click \"Build\" PlatformIO CLI: pio run Install Connect ESP32 board via USB. Check the serial port assigned to the board, adapt upload_port in platformio.ini , if necessary. PlatformIO IDE: Click \"Upload\" PlatformIO CLI: pio run --target upload Update Install esptool with pip3 install --user esptool . Connect the processor module via USB and determine the USB serial port. ( /dev/ttyUSB0 in this example) Update the firmware: python3 -m esptool --port /dev/ttyUSB0 --baud 921600 write_flash 0x10000 firmware.bin","title":"Introduction"},{"location":"#cadus-incinerator","text":"Furnace for the incineration of medical waste.","title":"CADUS incinerator"},{"location":"#project-scope","text":"This project contains the firmware & schematic for the control module of the CADUS incinerator.","title":"Project scope"},{"location":"#hardware","text":"The control module is based on this ESP32 board: DEBO JT ESP32 NodeMCU similar to DOIT ESP32 DEVKIT V1 . KiCad project covering the schematic of the motherboard carrying the ESP32 is included in the pcb folder.","title":"Hardware"},{"location":"#build-prerequisites","text":"Install PlatformIO IDE or PlatformIO Core (CLI) PlatformIO will take care of the Arduino framework and third-party libraries.","title":"Build Prerequisites"},{"location":"#build","text":"PlatformIO IDE: Click \"Build\" PlatformIO CLI: pio run","title":"Build"},{"location":"#install","text":"Connect ESP32 board via USB. Check the serial port assigned to the board, adapt upload_port in platformio.ini , if necessary. PlatformIO IDE: Click \"Upload\" PlatformIO CLI: pio run --target upload","title":"Install"},{"location":"#update","text":"Install esptool with pip3 install --user esptool . Connect the processor module via USB and determine the USB serial port. ( /dev/ttyUSB0 in this example) Update the firmware: python3 -m esptool --port /dev/ttyUSB0 --baud 921600 write_flash 0x10000 firmware.bin","title":"Update"},{"location":"burn_chamber/","text":"Burn chamber The burn chamber is responsible for managing the burn process in one burn chamber, which includes triggering ignition, reading temperature and controlling gas flow via valves. Temperature control The temperature is controlled with gas valves which can be ON or OFF (no gradual control). The main chamber features a single valve (VALVE_MAIN), the afterburner chamber features two valves (VALVE_AFT_HI, VALVE_AFT_LO) which create a high or low gas flow, respectively. When temperature sinks below T_MIN, VALVE_MAIN / VALVE_AFT_HI is activated. When temperature rises above T_MAX, VALVE_MAIN / VALVE_AFT_HI is deactivated, and in case of the afterburner chamber, VALVE_AFT_LO is activated instead. State machine stateDiagram-v2 [*] --> start: Burn start requested start --> waitIgnition: Set gas valve, request ignition waitIgnition --> failed: Ignition failed failed --> [*]: Reset waitIgnition --> waitTemp: Ignition successful waitTemp --> burnHigh: T_MIN reached burnHigh --> burnLow: T > T_MAX burnLow --> burnHigh: T < T_MIN burnHigh --> [*]: Reset burnLow --> [*]: Reset","title":"Burn chamber"},{"location":"burn_chamber/#burn-chamber","text":"The burn chamber is responsible for managing the burn process in one burn chamber, which includes triggering ignition, reading temperature and controlling gas flow via valves.","title":"Burn chamber"},{"location":"burn_chamber/#temperature-control","text":"The temperature is controlled with gas valves which can be ON or OFF (no gradual control). The main chamber features a single valve (VALVE_MAIN), the afterburner chamber features two valves (VALVE_AFT_HI, VALVE_AFT_LO) which create a high or low gas flow, respectively. When temperature sinks below T_MIN, VALVE_MAIN / VALVE_AFT_HI is activated. When temperature rises above T_MAX, VALVE_MAIN / VALVE_AFT_HI is deactivated, and in case of the afterburner chamber, VALVE_AFT_LO is activated instead.","title":"Temperature control"},{"location":"burn_chamber/#state-machine","text":"stateDiagram-v2 [*] --> start: Burn start requested start --> waitIgnition: Set gas valve, request ignition waitIgnition --> failed: Ignition failed failed --> [*]: Reset waitIgnition --> waitTemp: Ignition successful waitTemp --> burnHigh: T_MIN reached burnHigh --> burnLow: T > T_MAX burnLow --> burnHigh: T < T_MIN burnHigh --> [*]: Reset burnLow --> [*]: Reset","title":"State machine"},{"location":"ignition/","text":"Ignition module Ignition is triggered from higher level control (burn chamber). Ignition control Ignition coil is activated for a configurable time ign_pulse_w , this is repeated after a configurable delay ign_repeat_itvl until temperature has risen enough that a successful ignition can be assumed. Protection logic Ignition control features a simple protection logic to make sure there's no gas flow when the gas is not burning. After ignition has started, the ignition module checks if temperature has risen by a configurable delta ign_delta . When a configurable timeout ign_t has elapsed w/o temperature rising, then the ignition module indicates that ignition has failed and the gas flow should be shut down. State machine stateDiagram-v2 [*] --> setCoil: Ignition request setCoil --> waitPulse waitPulse --> resetCoil: ign_pulse_w elapsed resetCoil --> waitIgnition waitIgnition --> setCoil: ign_repeat_itvl elapsed waitIgnition --> success: Temp. raised waitIgnition --> failure: Timeout success --> [*]: Reset failure --> [*]: Reset","title":"Ignition"},{"location":"ignition/#ignition-module","text":"Ignition is triggered from higher level control (burn chamber).","title":"Ignition module"},{"location":"ignition/#ignition-control","text":"Ignition coil is activated for a configurable time ign_pulse_w , this is repeated after a configurable delay ign_repeat_itvl until temperature has risen enough that a successful ignition can be assumed.","title":"Ignition control"},{"location":"ignition/#protection-logic","text":"Ignition control features a simple protection logic to make sure there's no gas flow when the gas is not burning. After ignition has started, the ignition module checks if temperature has risen by a configurable delta ign_delta . When a configurable timeout ign_t has elapsed w/o temperature rising, then the ignition module indicates that ignition has failed and the gas flow should be shut down.","title":"Protection logic"},{"location":"ignition/#state-machine","text":"stateDiagram-v2 [*] --> setCoil: Ignition request setCoil --> waitPulse waitPulse --> resetCoil: ign_pulse_w elapsed resetCoil --> waitIgnition waitIgnition --> setCoil: ign_repeat_itvl elapsed waitIgnition --> success: Temp. raised waitIgnition --> failure: Timeout success --> [*]: Reset failure --> [*]: Reset","title":"State machine"},{"location":"incinerator/","text":"Incinerator The incinerator is responsible for managing the overall burn process. Burn sequence Start burn process in afterburner to pre-heat it When afterburner has reached operating temperature, enable air pump and main burner. When main burner has reached operating temp., wait until burn time is elapsed. Switch off gas and wait until system has cooled down. State machine stateDiagram-v2 [*] --> start: Burn start requested start --> waitAfterburner: Start afterburner waitAfterburner --> failureCoolDown: Aft. failed failureCoolDown --> [*]: System cooled down waitAfterburner --> startMain: Aft. temp. reached startMain --> waitMain: Start main burner waitMain --> burnActive: Main temp. reached waitMain --> failureCoolDown: Main failed burnActive --> coolDown: Burn time elapsed coolDown --> [*]: System cooled down","title":"Incinerator"},{"location":"incinerator/#incinerator","text":"The incinerator is responsible for managing the overall burn process.","title":"Incinerator"},{"location":"incinerator/#burn-sequence","text":"Start burn process in afterburner to pre-heat it When afterburner has reached operating temperature, enable air pump and main burner. When main burner has reached operating temp., wait until burn time is elapsed. Switch off gas and wait until system has cooled down.","title":"Burn sequence"},{"location":"incinerator/#state-machine","text":"stateDiagram-v2 [*] --> start: Burn start requested start --> waitAfterburner: Start afterburner waitAfterburner --> failureCoolDown: Aft. failed failureCoolDown --> [*]: System cooled down waitAfterburner --> startMain: Aft. temp. reached startMain --> waitMain: Start main burner waitMain --> burnActive: Main temp. reached waitMain --> failureCoolDown: Main failed burnActive --> coolDown: Burn time elapsed coolDown --> [*]: System cooled down","title":"State machine"},{"location":"pcb/","text":"PCB schematic","title":"PCB"},{"location":"pcb/#pcb-schematic","text":"","title":"PCB schematic"}]}